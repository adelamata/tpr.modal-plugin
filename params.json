{
  "name": "Tpr.modal-plugin",
  "tagline": "A modal plugin for your Web.",
  "body": "**tpr.modal-plugin**\r\n\tA modal plugin for your web @ Antonio de la Mata LÃ³pez @ 2016\r\n\r\n**Description**\r\n\ttpr.modal-plugin is a plugin that uses jQuery and born in \r\n\torder to give the programmer a completely customizable modal \r\n\tin every sense. This component allows a large number of configurations \r\n\tthat can be set in instantiation time or post-instantiation.\r\n\tThe main idea by the tpr.modal-plugin was designed is give to the \r\n\tprogrammer a componente that have a good API for mutate the modal \r\n\tbehaviour in any time and when is necessary. Is by that that tpr.modal-plugin \r\n\tis very flexible and usable in any frame or context.\r\n\r\n**Requisites**\r\n\tFor use tpr.modal-plugin only is necessary importing jquery library in our project.\r\n\r\n\r\n**The Plugin**\r\n\t# Javascript\r\n\tThe plugin is designed to work only with logic and not quite touch anything of\r\n\tstyles, the plugin code does not modify or create any CSS property to any of the \r\n\tHTML blocks the modal uses. This implies that is delegated to CSS full responsibility \r\n\tfor the display of modal.\r\n\r\n\tThat is, we are totally separating the modal logic of their way to be. This does not \r\n\tmeet the vast majority of plugins of any kind and we think that is a good starting \r\n\tpoint for designing our plugin.\r\n\r\n\tIn any case only a number of CSS properties that are required to add much needed \r\n\tmodal behavior are used, but does not work with any \"structural\" or \"visual\" style.\r\n\r\n\r\n\t# CSS\r\n\tThe style modal display is determined by the CSS, as is obvious. However in the \r\n\tcomponent we prefer to distinguish between structural and visual styles. Structural \r\n\tstyles are styles that modify the dimensional shape of the modal, ie sizes, paddings, \r\n\tmargins, etc. However visual styles change more visual properties such as color, font \r\n\tsizes, etc.\r\n\r\n\tWhy do we do this ?, because separating the styles in this way we can create a generic \r\n\tstyles for the shape of modal so not to repeat any of (structural) code and on the other \r\n\thand you can create color templates that modify the modal simply by changing the CSS class \r\n\tand pass the (visual) plugin.\r\n\r\n\t\t# Structural styles\r\n\t\tAs we discussed the CSS properties that are some structural consider as position, margin, \r\n\t\tpadding, etc. Here is an example:\r\n\t\t[class^=tpr-modalbox-] {\r\n\t\t\tposition: relative;\r\n\t\t\twidth: 30%;\r\n\t\t}\r\n\r\n\t\tActually these properties affect only the root class of all modal, ie the class \r\n\t\ttp-modalbox-\"anything\".\r\n\r\n\t\t# Visualization styles\r\n\t\tA display style would therefore be as follows:\r\n\t\ttpr-modalbox-grey {\r\n\t\t\tborder: 1px solid lightgrey;\r\n\t\t\tbackground: white;\r\n\t\t\tborder-radius: 2px;\r\n\t\t}\r\n\r\n\t# Create a new theme for our modal\r\n\tWith this separation we can easily create new color schemes for our modal. How ?, easy, all\r\n\tyou have to do is in our CSS file to create a class that is called something like tpr-modalbox-\"ournewcolor\". \r\n\tExample tpr-modalbox-yellow.\r\n\r\n\tAnd then go create visual styles that change colors, font size, etc.\r\n\r\n\t/* My yellow theme (Default)*/\r\n\t.tpr-modalbox-yellow {\r\n\t\tborder: 1px solid yellow;\r\n\t\tbackground: white;\r\n\t\tborder-radius: 2px;\r\n\t}\r\n\r\n\t.tpr-modalbox-yellow .tpr-modal-topbar {\r\n\t\tbackground: yellow;\r\n\t}\r\n\r\n\t.tpr-modalbox-yellow .tpr-modal-morebox {\r\n\t\tbackground: grey;\r\n\t\tcolor: lightgrey;\r\n\t}\r\n\t/* My yellow theme (Default)*/\r\n\r\n\tAnd then you only need to pass it to the constructor of modal when it is \r\n\tinstantiated in the parameter \"styleclass\". Example:\r\n\r\n\tvar modal = new TPRMODAL({\r\n\t\tstyleclass : \"tpr-modalbox-yellow\",\r\n\t\ttitle      : \"Warning\",\r\n\t\tmessage    : \"Warning!\"\r\n\t});\r\n\r\n**Properties (in constru**ction)\r\n\t# closable\r\n\t# styleclass\r\n\t# backlayer\r\n\t\t# state\r\n\t# closeoutclick\r\n\t# moreinfo\r\n\t\t# state\r\n\t\t# message\r\n\t\t# buttontext\r\n\t# buttons\r\n\t\t# accept\r\n\t\t\t# state\r\n\t\t\t# text\r\n\t\t\t# class\r\n\t\t\t# click\r\n\t\t# cancel\r\n\t\t\t# state\r\n\t\t\t# text\r\n\t\t\t# class\r\n\t\t\t# click\r\n\t\t# close\r\n\t\t\t# state\r\n\t\t\t# text\r\n\t\t\t# class\r\n\t\t\t# click\r\n\t# title\r\n\t# message\r\n\t# messageExplain\r\n\r\n\r\n**API**\r\n\t# setTitle(title) \r\n\tSet modal title\r\n\r\n\t# setMessage(message)\r\n\tSet modal message\r\n\r\n\t# setMessageExplain(explain)\r\n\tSet modal explain message\r\n\r\n\t# setMoreinfoState(state)\r\n\tShow or hide 'More info' button\r\n\r\n\t# setMoreinfoButtonText(text)\r\n\tSet 'More info' button text\r\n\r\n\t# setStyle(styleClass)\r\n\tSet modal style\r\n\r\n\t# setClosable(closable)\r\n\tSets whether the modal is curable. button cross at the top right of the modal \r\n\tand the event closing the modal click when it is removed out of hiding.\r\n\r\n\t# show()\r\n\tShow modal\r\n\r\n\t# hide()\r\n\tHide modal\r\n\r\n\t# setButtons(buttons)\r\n\tSet buttons",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}